#!/usr/bin/env ruby

if ARGV.length < 1
  $stderr.puts "Usage: strip_normal <X>\nAssuming a normal distribution, filters out numbers that do not belong to the centered X% of population"
  exit(-1)
end

keep = ARGV[0].to_f

def dichotomy(min,max,&block)
  vmin = block[min]
  vmax = block[max]
  loop do
    return min if (max - min) <= Float::EPSILON
    center = (min + max)/2.0
    vcenter = block[center]
    return center if vcenter.abs <= Float::EPSILON
    if vcenter*vmin > 0
      min = center
      vmin = vcenter
    else
      max = center
      vmax = vcenter
    end
  end
end

def inv_erf(x)
  dichotomy(0,6) { |y| Math.erf(y) - x }
end

numbers = []
$stdin.each do |line|
  next if line =~ /^\s*#/
  line = line.strip
  next if line.empty?
  numbers << line.to_f
end

average = numbers.inject(&:+) / numbers.count
standard_deviation = Math.sqrt(numbers.map { |number| (number-average)*(number-average) }.inject(&:+) / numbers.count)
# http://en.wikipedia.org/wiki/Normal_distribution
threshold = inv_erf(keep) * Math.sqrt(2) * standard_deviation
puts numbers.find_all { |number| (number-average).abs <= threshold }.join("\n")

