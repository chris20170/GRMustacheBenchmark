#!/usr/bin/env ruby

ROOT=File.join(File.dirname(__FILE__), '..')
LABEL_FOR_TASK = {
  'combined' => 'Parsing+Rendering',
  'parse' => 'Parsing',
  'render' => 'Rendering',
}

tasks = []
versions = []
scenarios = []
sample_for_version_for_scenario_for_task = {}
min_sample = nil

Dir.glob(File.join(ROOT, 'Product', 'samples', '**', '*')).each do |path|
  next unless File.extname(path) == '.sample'
  
  version = File.basename(path).gsub(/\.sample$/, '')
  versions |= [version]
  
  task = File.basename(File.dirname(path))
  tasks |= [task]
  
  scenario = File.basename(File.dirname(File.dirname(path)))
  scenarios |= [scenario]
  
  sample_count = File.read(path.gsub(/\.sample$/, '.sample_count')).strip.to_f
  
  sample_for_version_for_scenario_for_task[task] ||= {}
  sample = File.read(path).strip.to_f
  sample /= sample_count
  min_sample = sample if min_sample.nil? || min_sample > sample
  sample_for_version_for_scenario_for_task[task][scenario] ||= {}
  sample_for_version_for_scenario_for_task[task][scenario][version] = sample
end

versions = versions.sort_by { |version| version.scan(/\d*/).delete_if(&:empty?).map { |n| '%03d' % (n.to_i) }.join.to_i }


puts <<-MARKDOWN
# GRMustache benchmarks

You can here compare the performance of all [GRMustache](https://github.com/groue/GRMustache) versions since v1.7.1 (the first shipped as a static library).

GRMustache has been tested against the scenarios stored in the [Scenarios](GRMustacheBenchmark/tree/master/Scenarios) directory.

- `medium`: a reasonable Mustache template, that comes straight from a real application.
- `short`: a very very short template.

For each version and scenario, we benchmark three different tasks: parsing, rendering, and combined parsing+rendering.

Numbers below are computed from normal duration samples of those tasks.

## Tasks

MARKDOWN

time_precision = 2
time_width = time_precision+1+3
sample_column_width = [scenarios.map(&:length).max, time_width].max + 2
version_column_width = versions.map(&:length).max+2
sample_format = "%%%d.%df" % [time_width, time_precision]
line_format = ("\t%%-%ds" % version_column_width) + (("%%%ds" % sample_column_width) * scenarios.count)
tasks.each do |task|
  puts
  puts "### #{LABEL_FOR_TASK[task]} task"
  puts
  puts line_format % ([""]+scenarios)
  versions.reverse.each do |version|
    time_strings = scenarios.map do |scenario|
      sample = begin sample_for_version_for_scenario_for_task[task][scenario][version] / min_sample rescue nil end
      if sample
        sample_format % sample
      else
        "n/a"
      end
    end
    puts line_format % ([version] + time_strings)
  end
end

puts <<-MARKDOWN

-----

This README.md file has been generated with the `make` command.

MARKDOWN
